Total: 1352 samples
    1207  89.3%  89.3%     1352 100.0% thread_worker
      27   2.0%  91.3%       27   2.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
      22   1.6%  92.9%       76   5.6% SortedList_lookup
      17   1.3%  94.2%       68   5.0% SortedList_insert
      13   1.0%  95.1%       13   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
      11   0.8%  95.9%       11   0.8% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       9   0.7%  96.6%        9   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       8   0.6%  97.2%        8   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       8   0.6%  97.8%        8   0.6% _init
       6   0.4%  98.2%        6   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       5   0.4%  98.6%        5   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:161
       4   0.3%  98.9%        4   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:206
       4   0.3%  99.2%        4   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:211
       3   0.2%  99.4%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:164
       3   0.2%  99.6%        3   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:212
       2   0.1%  99.8%        2   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       2   0.1%  99.9%        2   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1733
       1   0.1% 100.0%        1   0.1% 0x00007ffee5bc460d
       0   0.0% 100.0%     1352 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%        1   0.1% __GI___clock_gettime
       0   0.0% 100.0%     1352 100.0% start_thread
ROUTINE ====================== thread_worker in /u/ms/ugrad/jachie/CS111/P2B/lab2_list.c
  1207   1352 Total samples (flat / cumulative)
     .      .   35:         exit(2);
     .      .   36:     }
     .      .   37: }
     .      .   38: 
     .      .   39: void* thread_worker(void* p)
---
     .      .   40: {
     .      .   41:     struct timespec start, end;
     .      .   42:     int threadNum = *((int *) p);
     .      .   43:     int startIndex = threadNum * num_iterations;
     .      .   44:     int i;
     .      .   45: 
     .      .   46:     // insert elements
     .      .   47:     for (i = startIndex; i < (threadNum + 1) * num_iterations; ++i)
     .      .   48:     {
     .      .   49:         // hash key to get index of sublist
     .      .   50:         unsigned int hash = hashkey(pool[i].key);
     .      .   51:         
     .      .   52:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   53:         if (opt_m) pthread_mutex_lock(mutex_locks + hash);
     .      .   54:         clock_gettime(CLOCK_MONOTONIC, &end);
   580    580   55:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + hash, 1));
     .      .   56:         
     .      .   57:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   58: 
     .     68   59:         SortedList_insert(listheads + hash, &pool[i]);
     .      .   60:         
     .      .   61:         if (opt_m) pthread_mutex_unlock(mutex_locks + hash);
     .      .   62:         else if (opt_s) __sync_lock_release(spin_locks + hash);
     .      .   63:     }
     .      .   64: 
     .      .   65:     // check full list length
     .      .   66:     for (i = 0; i < num_lists; ++i ){
     .      .   67:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   68:         if (opt_m) pthread_mutex_lock(mutex_locks + i);
     .      .   69:         clock_gettime(CLOCK_MONOTONIC, &end);
     2      2   70:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + i, 1));
     .      .   71:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   72:     }
     .      .   73:     
     .      .   74:     int total_length = 0;
     .      .   75:     int cur_length;
     .      .   76:     for (i = 0; i < num_lists; ++i) {
     .      .   77:         cur_length = SortedList_length(listheads + i);
     .      .   78:         if (cur_length >= 0) total_length += cur_length; 
     .      .   79:     }
     .      .   80:     if (total_length < 0) 
     .      .   81:     {
     .      .   82:         fprintf(stderr, "Error, corrupted list\n");
     .      .   83:         exit(2);
     .      .   84:     }
     .      .   85: 
     .      .   86:     for (i = 0; i < num_lists; ++i) {
     .      .   87:         if (opt_m) pthread_mutex_unlock(mutex_locks + i);
     .      .   88:         else if (opt_s) __sync_lock_release(spin_locks + i);
     .      .   89:     }
     .      .   90:     
     .      .   91: 
     .      .   92:     // lookup and then delete
     .      .   93:     for (i = startIndex; i < startIndex + num_iterations; ++i)
     .      .   94:     {
     .      .   95:         unsigned int hash = hashkey(pool[i].key);
     .      .   96:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   97:         if (opt_m) pthread_mutex_lock(mutex_locks + hash);
     .      1   98:         clock_gettime(CLOCK_MONOTONIC, &end);
   625    625   99:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + hash, 1));
     .      .  100:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  101: 
     .     76  102:         SortedListElement_t* e = SortedList_lookup(listheads + hash, pool[i].key);
     .      .  103:         SortedList_delete(e);
     .      .  104: 
     .      .  105:         if (opt_m) pthread_mutex_unlock(mutex_locks + hash);
     .      .  106:         else if (opt_s) __sync_lock_release(spin_locks + hash);
     .      .  107:     }
     .      .  108:     return NULL;
     .      .  109: }
---
     .      .  110: 
     .      .  111: int main(int argc, char* argv[]) 
     .      .  112: {
     .      .  113:     num_threads = 1;
     .      .  114:     num_iterations = 1;
ROUTINE ====================== thread_worker in /u/ms/ugrad/jachie/CS111/P2B/lab2_list.c
  1207   1352 Total samples (flat / cumulative)
     .      .   35:         exit(2);
     .      .   36:     }
     .      .   37: }
     .      .   38: 
     .      .   39: void* thread_worker(void* p)
---
     .      .   40: {
     .      .   41:     struct timespec start, end;
     .      .   42:     int threadNum = *((int *) p);
     .      .   43:     int startIndex = threadNum * num_iterations;
     .      .   44:     int i;
     .      .   45: 
     .      .   46:     // insert elements
     .      .   47:     for (i = startIndex; i < (threadNum + 1) * num_iterations; ++i)
     .      .   48:     {
     .      .   49:         // hash key to get index of sublist
     .      .   50:         unsigned int hash = hashkey(pool[i].key);
     .      .   51:         
     .      .   52:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   53:         if (opt_m) pthread_mutex_lock(mutex_locks + hash);
     .      .   54:         clock_gettime(CLOCK_MONOTONIC, &end);
   580    580   55:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + hash, 1));
     .      .   56:         
     .      .   57:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   58: 
     .     68   59:         SortedList_insert(listheads + hash, &pool[i]);
     .      .   60:         
     .      .   61:         if (opt_m) pthread_mutex_unlock(mutex_locks + hash);
     .      .   62:         else if (opt_s) __sync_lock_release(spin_locks + hash);
     .      .   63:     }
     .      .   64: 
     .      .   65:     // check full list length
     .      .   66:     for (i = 0; i < num_lists; ++i ){
     .      .   67:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   68:         if (opt_m) pthread_mutex_lock(mutex_locks + i);
     .      .   69:         clock_gettime(CLOCK_MONOTONIC, &end);
     2      2   70:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + i, 1));
     .      .   71:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .   72:     }
     .      .   73:     
     .      .   74:     int total_length = 0;
     .      .   75:     int cur_length;
     .      .   76:     for (i = 0; i < num_lists; ++i) {
     .      .   77:         cur_length = SortedList_length(listheads + i);
     .      .   78:         if (cur_length >= 0) total_length += cur_length; 
     .      .   79:     }
     .      .   80:     if (total_length < 0) 
     .      .   81:     {
     .      .   82:         fprintf(stderr, "Error, corrupted list\n");
     .      .   83:         exit(2);
     .      .   84:     }
     .      .   85: 
     .      .   86:     for (i = 0; i < num_lists; ++i) {
     .      .   87:         if (opt_m) pthread_mutex_unlock(mutex_locks + i);
     .      .   88:         else if (opt_s) __sync_lock_release(spin_locks + i);
     .      .   89:     }
     .      .   90:     
     .      .   91: 
     .      .   92:     // lookup and then delete
     .      .   93:     for (i = startIndex; i < startIndex + num_iterations; ++i)
     .      .   94:     {
     .      .   95:         unsigned int hash = hashkey(pool[i].key);
     .      .   96:         clock_gettime(CLOCK_MONOTONIC, &start);
     .      .   97:         if (opt_m) pthread_mutex_lock(mutex_locks + hash);
     .      1   98:         clock_gettime(CLOCK_MONOTONIC, &end);
   625    625   99:         if (opt_s) while (__sync_lock_test_and_set(spin_locks + hash, 1));
     .      .  100:         wait_time[threadNum] += 1000000000 * (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec);
     .      .  101: 
     .     76  102:         SortedListElement_t* e = SortedList_lookup(listheads + hash, pool[i].key);
     .      .  103:         SortedList_delete(e);
     .      .  104: 
     .      .  105:         if (opt_m) pthread_mutex_unlock(mutex_locks + hash);
     .      .  106:         else if (opt_s) __sync_lock_release(spin_locks + hash);
     .      .  107:     }
     .      .  108:     return NULL;
     .      .  109: }
---
     .      .  110: 
     .      .  111: int main(int argc, char* argv[]) 
     .      .  112: {
     .      .  113:     num_threads = 1;
     .      .  114:     num_iterations = 1;
